// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/devexps/go-micro/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the micro package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsEnforceInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ENFORCE_INVALID.String() && e.Code == 101
}

func ErrorEnforceInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(101, ErrorReason_ENFORCE_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsEnforceWithMatcherFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ENFORCE_WITH_MATCHER_FAILED.String() && e.Code == 102
}

func ErrorEnforceWithMatcherFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(102, ErrorReason_ENFORCE_WITH_MATCHER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLoadPolicyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOAD_POLICY_FAILED.String() && e.Code == 103
}

func ErrorLoadPolicyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(103, ErrorReason_LOAD_POLICY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSavePolicyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SAVE_POLICY_FAILED.String() && e.Code == 104
}

func ErrorSavePolicyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(104, ErrorReason_SAVE_POLICY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddNamedPolicyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_NAMED_POLICY_FAILED.String() && e.Code == 105
}

func ErrorAddNamedPolicyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(105, ErrorReason_ADD_NAMED_POLICY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsRemoveNamedPolicyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REMOVE_NAMED_POLICY_FAILED.String() && e.Code == 106
}

func ErrorRemoveNamedPolicyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(106, ErrorReason_REMOVE_NAMED_POLICY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsRemoveFilteredNamedPolicyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REMOVE_FILTERED_NAMED_POLICY_FAILED.String() && e.Code == 107
}

func ErrorRemoveFilteredNamedPolicyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(107, ErrorReason_REMOVE_FILTERED_NAMED_POLICY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddNamedGroupingPolicyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_NAMED_GROUPING_POLICY_FAILED.String() && e.Code == 108
}

func ErrorAddNamedGroupingPolicyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(108, ErrorReason_ADD_NAMED_GROUPING_POLICY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsRemoveNamedGroupingPolicyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REMOVE_NAMED_GROUPING_POLICY_FAILED.String() && e.Code == 109
}

func ErrorRemoveNamedGroupingPolicyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(109, ErrorReason_REMOVE_NAMED_GROUPING_POLICY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsRemoveFilteredNamedGroupingPolicyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REMOVE_FILTERED_NAMED_GROUPING_POLICY_FAILED.String() && e.Code == 110
}

func ErrorRemoveFilteredNamedGroupingPolicyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(110, ErrorReason_REMOVE_FILTERED_NAMED_GROUPING_POLICY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsRoleManagerIsNil(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ROLE_MANAGER_IS_NIL.String() && e.Code == 111
}

func ErrorRoleManagerIsNil(format string, args ...interface{}) *errors.Error {
	return errors.New(111, ErrorReason_ROLE_MANAGER_IS_NIL.String(), fmt.Sprintf(format, args...))
}

func IsGetUserRolesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USER_ROLES_FAILED.String() && e.Code == 112
}

func ErrorGetUserRolesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(112, ErrorReason_GET_USER_ROLES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetImplicitRolesForUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_IMPLICIT_ROLES_FOR_USER_FAILED.String() && e.Code == 113
}

func ErrorGetImplicitRolesForUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(113, ErrorReason_GET_IMPLICIT_ROLES_FOR_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUsersFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USERS_FAILED.String() && e.Code == 114
}

func ErrorGetUsersFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(114, ErrorReason_GET_USERS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetRolesForUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_ROLES_FOR_USER_FAILED.String() && e.Code == 115
}

func ErrorGetRolesForUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(115, ErrorReason_GET_ROLES_FOR_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddGroupingPolicyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_GROUPING_POLICY_FAILED.String() && e.Code == 116
}

func ErrorAddGroupingPolicyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(116, ErrorReason_ADD_GROUPING_POLICY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsRemoveGroupingPolicyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REMOVE_GROUPING_POLICY_FAILED.String() && e.Code == 117
}

func ErrorRemoveGroupingPolicyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(117, ErrorReason_REMOVE_GROUPING_POLICY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsRemoveFilteredGroupingPolicyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REMOVE_FILTERED_GROUPING_POLICY_FAILED.String() && e.Code == 118
}

func ErrorRemoveFilteredGroupingPolicyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(118, ErrorReason_REMOVE_FILTERED_GROUPING_POLICY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsDeleteUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_USER_FAILED.String() && e.Code == 119
}

func ErrorDeleteUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(119, ErrorReason_DELETE_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsDeleteRoleFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_ROLE_FAILED.String() && e.Code == 120
}

func ErrorDeleteRoleFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(120, ErrorReason_DELETE_ROLE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetImplicitPermissionsForUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_IMPLICIT_PERMISSIONS_FOR_USER_FAILED.String() && e.Code == 121
}

func ErrorGetImplicitPermissionsForUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(121, ErrorReason_GET_IMPLICIT_PERMISSIONS_FOR_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsRemoveFilteredPolicyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REMOVE_FILTERED_POLICY_FAILED.String() && e.Code == 122
}

func ErrorRemoveFilteredPolicyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(122, ErrorReason_REMOVE_FILTERED_POLICY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddPolicyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_POLICY_FAILED.String() && e.Code == 123
}

func ErrorAddPolicyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(123, ErrorReason_ADD_POLICY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsRemovePolicyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REMOVE_POLICY_FAILED.String() && e.Code == 124
}

func ErrorRemovePolicyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(124, ErrorReason_REMOVE_POLICY_FAILED.String(), fmt.Sprintf(format, args...))
}
