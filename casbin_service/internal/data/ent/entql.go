// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/devexps/go-casbin/casbin_service/v2/internal/data/ent/casbinrule"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   casbinrule.Table,
			Columns: casbinrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: casbinrule.FieldID,
			},
		},
		Type: "CasbinRule",
		Fields: map[string]*sqlgraph.FieldSpec{
			casbinrule.FieldPtype: {Type: field.TypeString, Column: casbinrule.FieldPtype},
			casbinrule.FieldV0:    {Type: field.TypeString, Column: casbinrule.FieldV0},
			casbinrule.FieldV1:    {Type: field.TypeString, Column: casbinrule.FieldV1},
			casbinrule.FieldV2:    {Type: field.TypeString, Column: casbinrule.FieldV2},
			casbinrule.FieldV3:    {Type: field.TypeString, Column: casbinrule.FieldV3},
			casbinrule.FieldV4:    {Type: field.TypeString, Column: casbinrule.FieldV4},
			casbinrule.FieldV5:    {Type: field.TypeString, Column: casbinrule.FieldV5},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (crq *CasbinRuleQuery) addPredicate(pred func(s *sql.Selector)) {
	crq.predicates = append(crq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CasbinRuleQuery builder.
func (crq *CasbinRuleQuery) Filter() *CasbinRuleFilter {
	return &CasbinRuleFilter{config: crq.config, predicateAdder: crq}
}

// addPredicate implements the predicateAdder interface.
func (m *CasbinRuleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CasbinRuleMutation builder.
func (m *CasbinRuleMutation) Filter() *CasbinRuleFilter {
	return &CasbinRuleFilter{config: m.config, predicateAdder: m}
}

// CasbinRuleFilter provides a generic filtering capability at runtime for CasbinRuleQuery.
type CasbinRuleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CasbinRuleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *CasbinRuleFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(casbinrule.FieldID))
}

// WherePtype applies the entql string predicate on the Ptype field.
func (f *CasbinRuleFilter) WherePtype(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldPtype))
}

// WhereV0 applies the entql string predicate on the V0 field.
func (f *CasbinRuleFilter) WhereV0(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldV0))
}

// WhereV1 applies the entql string predicate on the V1 field.
func (f *CasbinRuleFilter) WhereV1(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldV1))
}

// WhereV2 applies the entql string predicate on the V2 field.
func (f *CasbinRuleFilter) WhereV2(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldV2))
}

// WhereV3 applies the entql string predicate on the V3 field.
func (f *CasbinRuleFilter) WhereV3(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldV3))
}

// WhereV4 applies the entql string predicate on the V4 field.
func (f *CasbinRuleFilter) WhereV4(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldV4))
}

// WhereV5 applies the entql string predicate on the V5 field.
func (f *CasbinRuleFilter) WhereV5(p entql.StringP) {
	f.Where(p.Field(casbinrule.FieldV5))
}
