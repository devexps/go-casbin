// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/devexps/go-casbin/api/gen/go/common/conf"
	"github.com/devexps/go-casbin/casbin_service/v2/internal/biz"
	"github.com/devexps/go-casbin/casbin_service/v2/internal/data"
	"github.com/devexps/go-casbin/casbin_service/v2/internal/server"
	"github.com/devexps/go-casbin/casbin_service/v2/internal/service"
	"github.com/devexps/go-micro/v2"
	"github.com/devexps/go-micro/v2/log"
	"github.com/devexps/go-micro/v2/registry"
)

// Injectors from wire.go:

// initApp init micro application.
func initApp(logger log.Logger, registrar registry.Registrar, bootstrap *conf.Bootstrap) (*micro.App, func(), error) {
	client := data.NewEntClient(logger, bootstrap)
	dataData, cleanup, err := data.NewData(logger, client)
	if err != nil {
		return nil, nil, err
	}
	iEnforcer := data.NewEnforcer(logger, bootstrap, client)
	casbinRepo := data.NewCasbinRepo(dataData, logger, iEnforcer)
	enforceUseCase := biz.NewEnforceUseCase(logger, casbinRepo)
	policyUseCase := biz.NewPolicyUseCase(logger, casbinRepo)
	basicUseCase := biz.NewBasicUseCase(logger, casbinRepo)
	rbacUseCase := biz.NewRBACUseCase(logger, casbinRepo)
	casbinService := service.NewCasbinService(logger, enforceUseCase, policyUseCase, basicUseCase, rbacUseCase)
	grpcServer := server.NewGRPCServer(bootstrap, logger, casbinService)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
